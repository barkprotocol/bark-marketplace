// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for Membership Status
enum MembershipStatus {
  active
  inactive
  pending
}

// Enum for Membership Tiers
enum MembershipTier {
  bronze
  silver
  gold
  platinum
}

// Enum for Token Types
enum TokenType {
  sol
  bark
  usdc
}

// User Model
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String   // Encrypt this field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  memberships Membership[]
  transactions Transaction[]
  payments     Payment[]
  donations    Donation[]
}

// Club Model
model Club {
  id        String   @id @default(uuid())
  name      String   @unique
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tiers     Tier[]
  memberships Membership[]
}

// Tier Model
model Tier {
  id        String          @id @default(uuid())
  club      Club            @relation(fields: [clubId], references: [id])
  clubId    String
  name      String
  description String?
  tierLevel MembershipTier
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  levels    Level[]
}

// Level Model
model Level {
  id        String   @id @default(uuid())
  tier      Tier     @relation(fields: [tierId], references: [id])
  tierId    String
  name      String
  description String?
  levelNumber Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Membership Model
model Membership {
  id        String            @id @default(uuid())
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  club      Club              @relation(fields: [clubId], references: [id])
  clubId    String
  tier      Tier?             @relation(fields: [tierId], references: [id])
  tierId    String?
  level     Level?            @relation(fields: [levelId], references: [id])
  levelId   String?
  status    MembershipStatus @default(pending)
  joinedAt  DateTime         @default(now())
  
  @@unique([userId, clubId])
}

// Transaction Model
model Transaction {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  amount      Float
  tokenType   TokenType
  transactionDate DateTime @default(now())
  description String?
}

// Payment Model
model Payment {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  amount       Float
  tokenType    TokenType
  paymentDate  DateTime @default(now())
  paymentMethod String?
  description  String?
}

// Donation Model
model Donation {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  amount       Float
  tokenType    TokenType
  donationDate DateTime @default(now())
  description  String?
}
